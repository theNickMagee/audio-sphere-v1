import ddf.minim.*;
import ddf.minim.ugens.*;

Minim minim;

AudioInput in;
AudioRecorder recorder;
boolean recorded;

// for playing back
AudioOutput out;
FilePlayer player;

//things to measure
float volume;
float gain;
float smoothness;
boolean clap;
int changes_in_slope = 0;
boolean slopeP = true;


//SPHERE STUFF
PVector[][] globe;
int total = 32;
float rotation=0;
float rotationSpeed = 1;
PVector last_row_coords;

boolean recording = false;

void setup() {
 // frameRate(10);
  size(600, 600, P3D);
  colorMode(HSB);
  globe = new PVector[total+1][total+1];
  minim = new Minim(this);
  in = minim.getLineIn(Minim.STEREO, 2048);
  recorder = minim.createRecorder(in, "myrecording.wav");
  out = minim.getLineOut( Minim.STEREO );

}

void draw() {
  float orbitRadius= width;
  float ypos= 0;
  float xpos= cos(radians(rotation))*orbitRadius;
  float zpos= sin(radians(rotation))*orbitRadius;
  rotation+= rotationSpeed;
  camera(xpos, ypos, zpos, 0, 0, 0, 0, -1, 0);
  background(0);
  
  
  stroke(255);
  strokeWeight(1);
  changes_in_slope = 0;
  for(int i = 0; i < in.left.size()-4 / 2; i+=2){
   // line(i, height/2 + in.left.get(i)*200, i+2, height/2 + in.left.get(i+2)*200);
    //println(in.left.get(i));
    if (slopeP == true){
      if(in.left.get(i+ 2) - in.left.get(i) < -0.01){
        slopeP = false;
        changes_in_slope +=1;
      }
    
    }else{
      if(in.left.get(i+ 2) - in.left.get(i) > 0.01){
        slopeP = true;
        changes_in_slope +=1;
      }
    }
  }
  rotationSpeed = map(changes_in_slope, 0, 300, -1, 1);
  
  noStroke();
  fill(0);
  //lights();
  float r = 200;
  for (int i = 0; i < total+1; i++) {
    float lat = map(i, 0, total, 0, PI);
    for (int j = 0; j < total+1; j++) {
      r = 200;
      //if (j % 2 == 0){
     if (j != total  && j  != 0){
        r += (in.left.get(1+(j*32)) + in.right.get(1+(j*32))) * 50;
     }
     // }
      //if (i % 2 == 0){
        if (j != total && j != 0){
        r += (in.left.get(1+(i*32)) + in.right.get(1+(j*32))) * 50;
        }
     // }
      float lon = map(j, 0, total, 0, TWO_PI);
      float x = r * sin(lat) * cos(lon) ;
      float y = r * sin(lat) * sin(lon);
      float z = r * cos(lat);
      //if (j % 2 == 0){
      //  print("x1: ", x);
      //  x += (in.left.level() + in.right.level())* 100;
      //  y += (in.left.level() + in.right.level())* 100;
      //  //z*= (in.left.level() + in.right.level())* 3;
      //  print(" , x2: ", x);
      //  println();
      //}
      globe[i][j] = new PVector(x, y, z);
    }
    if (recording){
     // saveFrame();
    }
  }
int count = 0;
  for (int i = 0; i < total; i++) {
    fill(map(changes_in_slope * i, 0, 700 * total, 0, 255) , 255, 255);
    //float hu = map(i, 0, total, 0, 255*6);
    //fill(hu  % 255, 255, 255);
    beginShape(TRIANGLE_STRIP);
    for (int j = 0; j < total+1; j++) {
      //println(changes_in_slope);
      
      PVector v1 = globe[i][j];
      stroke(255);
      strokeWeight(2);
      vertex(v1.x, v1.y, v1.z);
      PVector v2 = globe[i+1][j];
      //if (j == total){
      //  v2 = globe[1][j];
      //}
      vertex(v2.x, v2.y, v2.z);
      
      
    }
    endShape();
  }
  
}

void keyReleased(){
  if ( !recorded && key == 'r' ) {
    if ( recorder.isRecording() ) 
    {
      recorder.endRecord();
      recorded = true;
      println("ending record");
      recording = false;
    }
    else 
    {
      println("beggning record");
      recorder.beginRecord();
      recording = true;
    }
  }
  if ( recorded && key == 's' ){
    if ( player != null )
    {
        player.unpatch( out );
        player.close();
    }
    player = new FilePlayer( recorder.save() );
    player.patch( out );
    player.play();
  }
}
